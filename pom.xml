<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd">
    <modelVersion>4.0.0</modelVersion>
    <parent>
        <groupId>org.springframework.boot</groupId>
        <artifactId>spring-boot-starter-parent</artifactId>
        <version>2.5.4</version>
        <relativePath/> <!-- lookup parent from repository -->
    </parent>
    <groupId>cn.krl</groupId>
    <artifactId>visit-education-backend</artifactId>
    <version>0.0.1-SNAPSHOT</version>
    <name>visit-education-backend</name>
    <description>国内访问学者查询系统后端</description>
    <properties>
        <java.version>1.8</java.version>
    </properties>
    <dependencies>
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-web</artifactId>
        </dependency>
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-test</artifactId>
            <scope>test</scope>
        </dependency>
        <dependency>
            <groupId>org.projectlombok</groupId>
            <artifactId>lombok</artifactId>
        </dependency>

        <dependency>
            <groupId>com.baomidou</groupId>
            <artifactId>mybatis-plus-boot-starter</artifactId>
            <version>3.4.3.3</version>
        </dependency>

        <!--swagger文档生成-->
        <!-- https://mvnrepository.com/artifact/io.springfox/springfox-boot-starter -->
        <dependency>
            <groupId>io.springfox</groupId>
            <artifactId>springfox-boot-starter</artifactId>
            <version>3.0.0</version>
        </dependency>

        <!--合法性校验框架-->
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-validation</artifactId>
        </dependency>

        <!--mysql-->
        <dependency>
            <groupId>mysql</groupId>
            <artifactId>mysql-connector-java</artifactId>
            <version>8.0.26</version>
        </dependency>

        <!--java object和json互换-->
        <!-- https://mvnrepository.com/artifact/com.alibaba/fastjson -->
        <dependency>
            <groupId>com.alibaba</groupId>
            <artifactId>fastjson</artifactId>
            <version>1.2.78</version>
        </dependency>

        <!--excel处理-->
        <dependency>
            <groupId>com.alibaba</groupId>
            <artifactId>easyexcel</artifactId>
            <version>2.0.5</version>
        </dependency>

        <!-- shiro -->
        <dependency>
            <groupId>org.apache.shiro</groupId>
            <artifactId>shiro-spring-boot-starter</artifactId>
            <version>1.5.3</version>
        </dependency>
        <!--        <dependency>-->
        <!--            <groupId>org.springframework.boot</groupId>-->
        <!--            <artifactId>spring-boot-starter-data-jpa</artifactId>-->
        <!--        </dependency>-->

        <!--token生成-->
        <!-- https://mvnrepository.com/artifact/com.auth0/java-jwt -->
        <dependency>
            <groupId>com.auth0</groupId>
            <artifactId>java-jwt</artifactId>
            <version>3.8.3</version>
        </dependency>

        <dependency>
            <groupId>org.springframework</groupId>
            <artifactId>spring-web</artifactId>
            <version>5.3.9</version>
        </dependency>

        <!--druid-->
        <dependency>
            <groupId>com.alibaba</groupId>
            <artifactId>druid-spring-boot-starter</artifactId>
            <version>1.1.21</version>
        </dependency>
        <!--druid监控-->
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-actuator</artifactId>
        </dependency>
        <!--redis-->
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-data-redis-reactive</artifactId>
        </dependency>
    </dependencies>

    <build>
        <finalName>visit-education-backend</finalName>
        <plugins>
            <plugin>
                <groupId>org.springframework.boot</groupId>
                <artifactId>spring-boot-maven-plugin</artifactId>
            </plugin>
            <!--<plugin>-->
            <!--    <groupId>org.apache.maven.plugins</groupId>-->
            <!--    <artifactId>maven-resources-plugin</artifactId>-->
            <!--    <version>3.1.0</version>-->
            <!--</plugin>-->
            <!--&lt;!&ndash;使用docker-maven-plugin插件&ndash;&gt;-->
            <!--<plugin>-->
            <!--    <groupId>com.spotify</groupId>-->
            <!--    <artifactId>docker-maven-plugin</artifactId>-->
            <!--    <version></version>-->
            <!--    &lt;!&ndash;将插件绑定在某个phase执行&ndash;&gt;-->
            <!--    <executions>-->
            <!--        <execution>-->
            <!--            <id>build-image</id>-->
            <!--            &lt;!&ndash;用户只需执行mvn package ，就会自动执行mvn docker:build&ndash;&gt;-->
            <!--            <phase>package</phase>-->
            <!--            <goals>-->
            <!--                <goal>build</goal>-->
            <!--            </goals>-->
            <!--        </execution>-->
            <!--    </executions>-->

            <!--    <configuration>-->
            <!--        &lt;!&ndash;指定生成的镜像名,这里是项目名&ndash;&gt;-->
            <!--        <imageName>${project.artifactId}</imageName>-->
            <!--        &lt;!&ndash;指定标签 这里指定的是镜像的版本，我们默认版本是latest&ndash;&gt;-->
            <!--        <imageTags>-->
            <!--            <imageTag>latest</imageTag>-->
            <!--        </imageTags>-->
            <!--        &lt;!&ndash;指定基础镜像jdk1.8&ndash;&gt;-->
            <!--        <baseImage>java</baseImage>-->
            <!--        &lt;!&ndash;切换到ROOT目录&ndash;&gt;-->
            <!--        <workdir>/ROOT</workdir>-->
            <!--        &lt;!&ndash;查看我们的java版本&ndash;&gt;-->
            <!--        <cmd>["java", "-version"]</cmd>-->
            <!--        &lt;!&ndash;${project.build.finalName}.jar是打包后生成的jar包的名字&ndash;&gt;-->
            <!--        <entryPoint>["java", "-jar", "/${project.build.finalName}.jar"]</entryPoint>-->
            <!--        &lt;!&ndash;指定远程 docker api地址&ndash;&gt;-->
            <!--        <dockerHost>http://47.106.170.165:2375</dockerHost>-->
            <!--        &lt;!&ndash; 这里是复制 jar 包到 docker 容器指定目录配置 &ndash;&gt;-->
            <!--        <resources>-->
            <!--            <resource>-->
            <!--                <targetPath>/</targetPath>-->
            <!--                &lt;!&ndash;jar 包所在的路径  此处配置的 即对应 target 目录&ndash;&gt;-->
            <!--                <directory>${project.build.directory}</directory>-->
            <!--                &lt;!&ndash;用于指定需要复制的文件 需要包含的 jar包 ，这里对应的是 Dockerfile中添加的文件名　&ndash;&gt;-->
            <!--                <include>${project.build.finalName}.jar</include>-->
            <!--            </resource>-->
            <!--        </resources>-->

            <!--    </configuration>-->
            <!--</plugin>-->
        </plugins>
    </build>

</project>
